
ALLOWED_HOSTS = ['*']
{% if env.release_env == 'dev' %}
DEBUG = True
TEMPLATES[0]["OPTIONS"]["debug"] = DEBUG
MAIL_DEBUG = DEBUG 
#INSTALLED_APPS += (
#    'debug_toolbar',
#    )
#DEBUG_TOOLBAR_PATCH_SETTINGS = False
{% else %}
DEBUG = False
{% endif %}

RELEASE_ENV = '{{ env.release_env }}'
TUTORIAL_MODE = {{ env.misc.tutorial_mode }}

PACKAGE_VERSION='{{facs.version}}'

{% if env.misc.tutorial_mode %}
EMAIL_SUBJECT_PREFIX='[PDB TUTORIAL] '
DISABLE_VERIFICATION_QUEUE_EMAILS = True
DISABLE_VERIFICATION_QUEUE = True
AUTO_APPROVE_AFFILIATION = True
AUTO_VERIFY_USERS = True
{% else %}
EMAIL_SUBJECT_PREFIX='[{{env.release_env}}] '
{% endif %}

# from for errors
SERVER_EMAIL='{{env.contact.email}}'
# from for users
DEFAULT_FROM_EMAIL='{{env.contact.email}}'
SPONSORSHIPS_EMAIL='{{env.contact.sponsorship}}'
ADMINS = (
    ('Support', '{{env.contact.email}}'),
)

{% if env.mail %}
EMAIL_HOST = '{{env.mail.host}}'
EMAIL_PORT = {{env.mail.port}}
EMAIL_HOST_USER = '{{env.mail.user}}'
EMAIL_HOST_PASSWORD = '{{module.email.password}}'
EMAIL_USE_TLS = {{env.mail.tls}}
{% endif %}


STATIC_ROOT = '{{env.home}}/static'
STATIC_URL = '/s/{{facs.version}}/'

MEDIA_ROOT = '{{env.home}}/media'
MEDIA_URL = '/m/{{facs.version}}/'

SECRET_KEY = '{{module.djangokey.password}}'

{% if env.misc.session.domain %}
SESSION_COOKIE_DOMAIN = '{{ env.misc.session.domain }}'
{% endif %}

SESSION_COOKIE_SECURE = {{ env.misc.session.secure }}

RECAPTCHA_PUBLIC_KEY = '{{ env.recaptcha.public_key }}'
RECAPTCHA_SECRET_KEY = '{{ module.recaptcha.password }}'

DESKPRO_KEY = '{{ module.deskpro.password }}'
DESKPRO_URL = '{{ env.rc.deskpro.url }}'

API_URL = '{{env.rc.api.url}}'
API_DEPTH_ROW_LIMIT = {{env.rc.api.depth_result_limit}}
API_CACHE_ROOT = '{{env.rc.api.cache.dir}}'
API_CACHE_ENABLED = {% if env.rc.api.cache.enabled %}True{% else %}False{% endif %}

GOOGLE_GEOLOC_API_KEY = '{{ module.google_geoloc_api.password }}'

RDAP_LACNIC_APIKEY = '{{ module.lacnic_rdap_apikey.password }}'

{% if "log" in env.rc.api.cache %}
API_CACHE_LOG = "{{ env.rc.api.cache.log }}"
{% else %}
API_CACHE_LOG = os.path.join(API_CACHE_ROOT,'log.log')
{% endif %}

MAINTENANCE_MODE_LOCKFILE = "{{ env.misc.maintenance.lockfile }}"

DATABASES = {
{% for db_name, db in env.rc.db.items() %}
    '{{db_name}}': {
        'ENGINE': 'django.db.backends.{{env.rc.db.engine | default('mysql')}}',
        'HOST': '{{db.host}}',
        'PORT': '{{db.port}}',
        'NAME': '{{db.prefix}}{{module.peeringdb.db.name}}',
        'USER': '{{db.prefix}}{{module.peeringdb.name}}',
        'PASSWORD': '{{module.peeringdb.password}}',
    },
{% endfor %}
}

{% if 'read' in env.rc.db %}
DATABASE_ROUTERS = ["peeringdb_server.db_router.DatabaseRouter"]
{% endif %}

CONN_MAX_AGE = 3600

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FWD_PROTO', 'https')

OAUTH_ENABLED = {% if env.oauth.enabled %}True{% else %}False{% endif %}

# In a beta environment that gets sync'd from production this
# flag allows you to enable / disable showing of next sync date in
# the beta notification banner
SHOW_AUTO_PROD_SYNC_WARNING = {{ env.misc.show_auto_prod_sync_warning }}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        # Include the default Django email handler for errors
        # This is what you'd get without configuring logging at all.
        'mail_admins': {
            'class': 'django.utils.log.AdminEmailHandler',
            'level': 'ERROR',
             # But the emails are plain text by default - HTML is nicer
            'include_html': True,
        },
        # Log to a text file that can be rotated by logrotate
        'logfile': {
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': '{{env.home}}/var/log/django.log'
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            },
    },
    'loggers': {
        # Again, default Django configuration to email unhandled exceptions
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        # Might as well log any errors anywhere else in Django
        'django': {
#            'handlers': ['console', 'logfile'],
#            'level': 'DEBUG',
            'handlers': ['logfile'],
            'level': 'ERROR',
            'propagate': False,
        },
        # Your own app - this assumes all your logger names start with "myapp."
        '': {
            'handlers': ['logfile'],
            'level': 'WARNING', # Or maybe INFO or DEBUG
            'propagate': False
        },
    },
}

if DEBUG:
    # make all loggers use the console.
    for logger in LOGGING['loggers']:
        LOGGING['loggers'][logger]['handlers'] = ['console']

