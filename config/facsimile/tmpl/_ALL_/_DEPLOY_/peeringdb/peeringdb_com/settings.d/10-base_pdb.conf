
ADMINS = (
    ('Support', '{{env.contact.email}}'),
)

NSP_MODE = "crud"

AUTH_USER_MODEL = 'peeringdb_server.User'

GRAPPELLI_ADMIN_TITLE = 'PeeringDB'

TABLE_PREFIX = "peeringdb_"
ABSTRACT_ONLY = True

LOGIN_URL = "/login"
LOGIN_REDIRECT_URL = "/"

BASE_URL = "{{env.misc.base_url}}"
PASSWORD_RESET_URL = "{{env.misc.base_url}}/reset-password"

ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = "/login"
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "/verify"
ACCOUNT_EMAIL_REQUIRED = True

# all suggested entities will be created under this org
SUGGEST_ENTITY_ORG = {{env.misc.suggestions.org_id}}

CSRF_FAILURE_VIEW = 'peeringdb_server.views.view_http_error_csrf'

RECAPTCHA_VERIFY_URL = 'https://www.google.com/recaptcha/api/siteverify'

#'user' user group
USER_GROUP_ID=2

#'guest' user group
GUEST_GROUP_ID=1

MIDDLEWARE += (
    'peeringdb_server.maintenance.Middleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'corsheaders.middleware.CorsMiddleware',
)

MOBI_DETECT_TABLET = True

INSTALLED_APPS += [
    'dal',
    'dal_select2',
    'grappelli',
    'django.contrib.admin',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'bootstrap3',
    'corsheaders',
    'crispy_forms',
    'django_countries',
    'django_inet',
    'django_namespace_perms',
    'django_peeringdb',
    'django_tables2',
    'oauth2_provider',
    'peeringdb_server',
    'reversion',
    'captcha',
    'django_handleref',
    ]

# django_peeringdb settings
PEERINGDB_ABSTRACT_ONLY = True

# add user defined iso code for Kosovo
COUNTRIES_OVERRIDE = {
    'XK': _('Kosovo'),
}

AUTHENTICATION_BACKENDS += (
    'oauth2_provider.backends.OAuth2Backend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# No one specific host is allow Allow-Origin at this point]
# Origin for API get request is handled via signals (signals.py)
CORS_ORIGIN_WHITELIST = []

# don't allow cookies
CORS_ALLOW_CREDENTIALS = False

# only allow for cross origin requests for GET and OPTIONS
CORS_ALLOW_METHODS = ["GET", "OPTIONS"]

OAUTH2_PROVIDER = {
    'SCOPES': {
        'profile': 'user profile',
        'email': 'email address',
        'networks': 'list of user networks and permissions',
    },
    'ALLOWED_REDIRECT_URI_SCHEMES': ['https'],
  	'REQUEST_APPROVAL_PROMPT': 'auto',
}

# maximum value to allow in network.info_prefixes4
DATA_QUALITY_MAX_PREFIX_V4_LIMIT = {{ env.data_quality.max_prefix_v4_limit }}

# maximum value to allow in network.info_prefixes6
DATA_QUALITY_MAX_PREFIX_V6_LIMIT = {{ env.data_quality.max_prefix_v6_limit }}

# minimum value to allow for prefix length on a v4 prefix
DATA_QUALITY_MIN_PREFIXLEN_V4 = {{ env.data_quality.min_prefixlen_v4 }}

# maximum value to allow for prefix length on a v4 prefix
DATA_QUALITY_MAX_PREFIXLEN_V4 = {{ env.data_quality.max_prefixlen_v4 }}

# minimum value to allow for prefix length on a v6 prefix
DATA_QUALITY_MIN_PREFIXLEN_V6 = {{ env.data_quality.min_prefixlen_v6 }}

# maximum value to allow for prefix length on a v6 prefix
DATA_QUALITY_MAX_PREFIXLEN_V6 = {{ env.data_quality.max_prefixlen_v6 }}


RATELIMITS = {
{% for k,v in env.misc.ratelimits.items() %}
    "{{ k }}" : "{{ v }}",
{% endfor %}
}

IXF_POSTMORTEM_LIMIT = {{ env.misc.ixf.postmortem.limit }}

CACHES = {
    "default" : {
        "BACKEND" : "django.core.cache.backends.db.DatabaseCache",
        "LOCATION" : "django_cache",
        "OPTIONS" : {
          # maximum number of entries in the cache
          "MAX_ENTRIES" : 5000,
          # once max entries are reach delete 500 of the oldest entries
          "CULL_FREQUENCY" : 10
        }
    }
}
